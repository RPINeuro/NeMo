<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="neuron_8c">
    <title>neuron.c File Reference</title>
    <programlisting>#include &quot;neuron.h&quot;</programlisting>
<para>Include dependency diagram for neuron.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="neuron_8c__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for neuron.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="neuron_8c__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>LeakFunctions</title>
      <description>
<para>Neuron functions that manage leaks.</para>

<para>All voltage state saving must be handled in the neuron event function <link linkend="neuron_8c_1aa6819d7492f0173f2234ba0b8b0bb674">neuronReceiveMessage()</link>. </para>
</description>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a8e52befc10f975c6be39cc93af573d7e">noLeak</link> (
void * neuron, tw_stime now)<para><emphasis>noLeak - A non leaking neuron function.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1ac5bebec77c5216533ec5f6acd086532e">revNoLeak</link> (
void * neuron, tw_stime now)<para><emphasis>Reverse leak function for use when neurons have no defined leak function.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a64dc379b459a2b07b40bce35381210e8">linearLeak</link> (
void * neuron, tw_stime now)<para><emphasis>A linear leak function.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a26ced40d7ad7a0b448a136d8724fe18b">revLinearLeak</link> (
void * neuron, tw_stime now)<para><emphasis>Reverse leak function neurons that have a linear leak function assigned.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>ResetFunctions</title>
      <description>
<para>Reset function defs.</para>

<para>Neuron reset functions will change the neuron state without saving the previous state. All voltage state saving must be handled in the neuron event function <link linkend="neuron_8c_1aa6819d7492f0173f2234ba0b8b0bb674">neuronReceiveMessage()</link>. <para><link linkend="todo_1_todo000002">Todo</link> 
<para>: Check that reverse reset functions are needed, since previous voltage is stored in the neuron. </para>
</para></para>
</description>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a7f8eaa35f03747c795a2b727b364537b">resetZero</link> (
void * neuronState)<para><emphasis>Resets neuron voltage to 0 after firing.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a2e78d7d2b70bf7349c3854b3727dcc25">resetLinear</link> (
void * neuronState)<para><emphasis>Resets neuron voltage based on linear function.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a09e54832158e2f6abe898437979aae00">reverseResetLinear</link> (
void * neuronState)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1ae53276ccdb759ba1ea09806cbf9fc940">reverseResetZero</link> (
void * neuronState)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>NeuronFunctions</title>
      <description>
<para>Main neuron functions and behaviors </para>
</description>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1aa6819d7492f0173f2234ba0b8b0bb674">neuronReceiveMessage</link> (
<link linkend="structneuron_state">neuronState</link> * st, tw_stime time, <link linkend="struct_msg___data">Msg_Data</link> * m, tw_lp * lp)<para><emphasis>handles incomming synapse messages.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="neuron_8c_1a92d5882a15e11e2a6733483d51428e46">neuronShouldFire</link> (
<link linkend="structneuron_state">neuronState</link> * st)<para><emphasis>Checks to see if a neuron should fire.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1ae071ef984b7e0dd4ec38fca91e0abe39">neuronFire</link> (
<link linkend="structneuron_state">neuronState</link> * st, tw_stime time, <link linkend="struct_msg___data">Msg_Data</link> * m)<para><emphasis>neuronFire manages a firing event.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1ab1f4997e4bfe11e78faa6d37748aee67">neuronPostFire</link> (
<link linkend="structneuron_state">neuronState</link> * st, tw_stime time, <link linkend="struct_msg___data">Msg_Data</link> * m)<para><emphasis>neuronPostFire manages post-firing events, including reset functions</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1a06ee765bfae45fe9b7f0619bf4abe63d">generateWaitEvent</link> (
<link linkend="structneuron_state">neuronState</link> * st, tw_stime time, tw_lp * lp)<para><emphasis>generateWaitEvent creates a new wait event to this neuron for big-tick synchronization</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="neuron_8c_1ae630bdf5dd3744870968f07a6971659c">integrateSynapse</link> (
<link linkend="assist_8h_1a3f7a6e6a1210b6d9d7a42177dcb9634b">_idT</link> synapseID, <link linkend="structneuron_state">neuronState</link> * st, tw_lp * lp)<para><emphasis>function that adds a synapse&apos;s value to the current neuron&apos;s membrane potential.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /Users/Mark/Development/TrueNorth/tnt_benchmark/models/neuron.c</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">//</emphasis>
2 <emphasis class="comment">//&#32;&#32;neuron.c</emphasis>
3 <emphasis class="comment">//&#32;&#32;ROSS_TOP</emphasis>
4 <emphasis class="comment">//</emphasis>
5 <emphasis class="comment">//&#32;&#32;Created&#32;by&#32;Mark&#32;Plagge&#32;on&#32;6/18/15.</emphasis>
6 <emphasis class="comment">//</emphasis>
7 <emphasis class="comment">//</emphasis>
8 
9 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="neuron_8h">neuron.h</link>&quot;</emphasis>
10 
<link linkend="neuron_8h_1a8e52befc10f975c6be39cc93af573d7e">16 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a8e52befc10f975c6be39cc93af573d7e">noLeak</link>(<emphasis class="keywordtype">void</emphasis>&#32;*neuron,&#32;tw_stime&#32;now)&#32;{
17 &#32;&#32;<emphasis class="comment">//&#32;do&#32;nothing!!</emphasis>
18 }
<link linkend="neuron_8h_1ac5bebec77c5216533ec5f6acd086532e">19 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1ac5bebec77c5216533ec5f6acd086532e">revNoLeak</link>(<emphasis class="keywordtype">void</emphasis>&#32;*neuron,&#32;tw_stime&#32;now)&#32;{
20 &#32;&#32;<emphasis class="comment">//&#32;do&#32;nothing!!</emphasis>
21 }
<link linkend="neuron_8h_1a64dc379b459a2b07b40bce35381210e8">28 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a64dc379b459a2b07b40bce35381210e8">linearLeak</link>(<emphasis class="keywordtype">void</emphasis>&#32;*neuron,&#32;tw_stime&#32;now)&#32;{
29 &#32;&#32;&#32;&#32;<link linkend="structneuron_state">neuronState</link>&#32;*s&#32;=&#32;(<link linkend="structneuron_state">neuronState</link>&#32;*)neuron;
30 &#32;&#32;&#32;&#32;tw_stime&#32;bigTick&#32;=&#32;<link linkend="assist_8c_1a4d378196b7fceed090d64ec8820b4065">getCurrentBigTick</link>(now);
31 &#32;&#32;&#32;&#32;tw_stime&#32;delta&#32;=&#32;bigTick&#32;-&#32;s-&gt;<link linkend="structneuron_state_1a6f4e4d8fc1cf0257b486e01f628d2656">lastLeakTime</link>;
32 
33 &#32;&#32;&#32;&#32;s-&gt;<link linkend="structneuron_state_1a0fdd8f44c4105a94e17c4c58a51db486">membranePot</link>&#32;-=&#32;s-&gt;leakRate&#32;*&#32;delta;
34 &#32;&#32;&#32;&#32;s-&gt;<link linkend="structneuron_state_1a6f4e4d8fc1cf0257b486e01f628d2656">lastLeakTime</link>&#32;=&#32;now;
35 }
36 
<link linkend="neuron_8h_1a26ced40d7ad7a0b448a136d8724fe18b">37 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a26ced40d7ad7a0b448a136d8724fe18b">revLinearLeak</link>(<emphasis class="keywordtype">void</emphasis>&#32;*neuron,&#32;tw_stime&#32;now){
38 &#32;&#32;&#32;&#32;<link linkend="structneuron_state">neuronState</link>&#32;*s&#32;=&#32;(<link linkend="structneuron_state">neuronState</link>&#32;*)neuron;
39 &#32;&#32;&#32;&#32;tw_stime&#32;delta&#32;=&#32;s-&gt;<link linkend="structneuron_state_1a6f4e4d8fc1cf0257b486e01f628d2656">lastLeakTime</link>&#32;-&#32;now;
40 
41 &#32;&#32;&#32;&#32;s-&gt;<link linkend="structneuron_state_1a0fdd8f44c4105a94e17c4c58a51db486">membranePot</link>&#32;+=&#32;s-&gt;leakRate&#32;*&#32;delta;
42 &#32;&#32;&#32;&#32;s-&gt;<link linkend="structneuron_state_1a6f4e4d8fc1cf0257b486e01f628d2656">lastLeakTime</link>&#32;=&#32;now;
43 }
44 
45 
46 
<link linkend="neuron_8h_1a7f8eaa35f03747c795a2b727b364537b">56 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a7f8eaa35f03747c795a2b727b364537b">resetZero</link>(<emphasis class="keywordtype">void</emphasis>&#32;*<link linkend="structneuron_state">neuronState</link>)&#32;{
57 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis><link linkend="struct_neuron_model">NeuronModel</link>&#32;*s&#32;=&#32;(<emphasis class="keyword">struct&#32;</emphasis><link linkend="struct_neuron_model">NeuronModel</link>&#32;*)neuronState;
58 &#32;&#32;&#32;&#32;s-&gt;membranePot&#32;=&#32;0;&#32;<emphasis class="comment">//&#32;set&#32;current&#32;voltage&#32;to&#32;0.</emphasis>
59 }
60 
<link linkend="neuron_8h_1a2e78d7d2b70bf7349c3854b3727dcc25">67 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a2e78d7d2b70bf7349c3854b3727dcc25">resetLinear</link>(<emphasis class="keywordtype">void</emphasis>&#32;*<link linkend="structneuron_state">neuronState</link>)&#32;{
68 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis><link linkend="struct_neuron_model">NeuronModel</link>&#32;*s&#32;=&#32;(<emphasis class="keyword">struct&#32;</emphasis><link linkend="struct_neuron_model">NeuronModel</link>&#32;*)neuronState;
69 &#32;&#32;<emphasis class="comment">//&#32;reduce&#32;the&#32;value&#32;of&#32;the&#32;neuron&#32;based&#32;on&#32;the&#32;linear&#32;reduction&#32;function</emphasis>
70 &#32;&#32;<emphasis class="comment">//&#32;in&#32;the&#32;paper</emphasis>
71 &#32;&#32;&#32;&#32;<link linkend="assist_8h_1abe1fc1b8f9efd1187e564bcb8de7f815">_voltT</link>&#32;resetParam&#32;=&#32;(<link linkend="assist_8h_1abe1fc1b8f9efd1187e564bcb8de7f815">_voltT</link>)&#32;&amp;resetParam;
72 &#32;&#32;s-&gt;membranePot&#32;=&#32;s-&gt;membranePot&#32;-&#32;resetParam;
73 }
74 
<link linkend="neuron_8h_1a09e54832158e2f6abe898437979aae00">75 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a09e54832158e2f6abe898437979aae00">reverseResetLinear</link>(<emphasis class="keywordtype">void</emphasis>&#32;*<link linkend="structneuron_state">neuronState</link>){
76 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis><link linkend="struct_neuron_model">NeuronModel</link>&#32;*s&#32;=&#32;(<emphasis class="keyword">struct&#32;</emphasis><link linkend="struct_neuron_model">NeuronModel</link>&#32;*)neuronState;
77 &#32;&#32;&#32;&#32;<link linkend="assist_8h_1abe1fc1b8f9efd1187e564bcb8de7f815">_voltT</link>&#32;resetParam&#32;=&#32;(<link linkend="assist_8h_1abe1fc1b8f9efd1187e564bcb8de7f815">_voltT</link>)&#32;&amp;resetParam;
78 &#32;&#32;&#32;&#32;s-&gt;membranePot&#32;=&#32;s-&gt;membranePot&#32;+&#32;resetParam;
79 }
<link linkend="neuron_8h_1ae53276ccdb759ba1ea09806cbf9fc940">81 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1ae53276ccdb759ba1ea09806cbf9fc940">reverseResetZero</link>(<emphasis class="keywordtype">void</emphasis>&#32;*<link linkend="structneuron_state">neuronState</link>){
82 
83 }
84 
85 
<link linkend="neuron_8h_1aa6819d7492f0173f2234ba0b8b0bb674">104 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1aa6819d7492f0173f2234ba0b8b0bb674">neuronReceiveMessage</link>(<link linkend="structneuron_state">neuronState</link>&#32;*st,&#32;tw_stime&#32;time,&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*m,
105 tw_lp&#32;*lp){
106 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;willFire&#32;=&#32;<emphasis class="keyword">false</emphasis>;
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//save&#32;the&#32;previous&#32;state&#32;of&#32;the&#32;neuron:</emphasis>
108 &#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1a50734a9ba605a083a90814b63d039a03">savedLastLeakTime</link>&#32;=&#32;st-&gt;<link linkend="structneuron_state_1a6f4e4d8fc1cf0257b486e01f628d2656">lastLeakTime</link>;
109 &#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1a6922b3f3041346eb83cfc6352a22277b">savedLastActiveTime</link>&#32;=&#32;st-&gt;<link linkend="structneuron_state_1a0658ad1f8b57a00589c6ea84f9a4ab13">lastActiveTime</link>;
110 &#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1a5efe5de0478ea513ed5d90d89a49fcca">savedMembranePot</link>&#32;=&#32;st-&gt;<link linkend="structneuron_state_1a0fdd8f44c4105a94e17c4c58a51db486">membranePot</link>;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//random&#32;fn&#32;call&#32;state&#32;management.</emphasis>
112 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;startCount&#32;=&#32;lp-&gt;rng-&gt;count;
113 
114 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>&#32;(m-&gt;<link linkend="struct_msg___data_1a015b6eb45982e1842ee8fc389a099ced">eventType</link>)&#32;{
115 &#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<link linkend="assist_8h_1a7c1688de451e0dea1e11617bce3ec450a6ad6b93d8a818550e7246f6e0d143afb">SYNAPSE_OUT</link>:
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="neuron_8c_1ae630bdf5dd3744870968f07a6971659c">integrateSynapse</link>(m-&gt;<link linkend="struct_msg___data_1aefc820e92a74047ec7ed74c1c45f818f">localID</link>,&#32;st,&#32;lp);
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//next,&#32;we&#32;will&#32;check&#32;if&#32;a&#32;heartbeat&#32;message&#32;should&#32;be&#32;sent</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(st-&gt;<link linkend="structneuron_state_1af8935bcba177f2f3dfb9119c39ef7dc5">receivedSynapseMsgs</link>&#32;==&#32;0)&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="neuron_8h_1a766dff9e530486b055e97ebe392268b8">sendHeartbeat</link>(st,&#32;lp,&#32;time);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1af8935bcba177f2f3dfb9119c39ef7dc5">receivedSynapseMsgs</link>&#32;++;
123 
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<link linkend="assist_8h_1a7c1688de451e0dea1e11617bce3ec450a226690009a653238a52339561e6c466e">NEURON_HEARTBEAT</link>:
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1af8935bcba177f2f3dfb9119c39ef7dc5">receivedSynapseMsgs</link>&#32;=&#32;0;
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//Currently&#32;operates&#32;-&#32;leak-&gt;fire-&gt;(reset)</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1aa430f424f34dc59dc27736e27ec61320">doLeak</link>(st,&#32;time);
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;willFire&#32;=&#32;<link linkend="neuron_8c_1a92d5882a15e11e2a6733483d51428e46">neuronShouldFire</link>(st);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(willFire){
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="neuron_8c_1ae071ef984b7e0dd4ec38fca91e0abe39">neuronFire</link>(st,&#32;time,&#32;m);
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="neuron_8c_1ab1f4997e4bfe11e78faa6d37748aee67">neuronPostFire</link>(st,&#32;time,&#32;m);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1afe8825076c4cf3863c677307fec63c61">fireCount</link>&#32;++;
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="neuron_8h_1adadd3095c39786607629697406f3d1eb">neuronPostIntegrate</link>(st,&#32;time,&#32;lp,&#32;willFire);
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//stats&#32;collection</emphasis>
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1a71fbb9a79e8048b473b6e09d29a64bbe">SOPSCount</link>&#32;++;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
143 
144 &#32;&#32;<emphasis class="keywordflow">default</emphasis>:
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//Error&#32;condition&#32;-&#32;non-valid&#32;input.</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
147 &#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//store&#32;the&#32;random&#32;calls&#32;in&#32;the&#32;message:</emphasis>
150 &#32;&#32;&#32;&#32;m-&gt;<link linkend="struct_msg___data_1a2e49a6bcc6c45ade722f746b1ea707f2">rndCallCount</link>&#32;=&#32;lp-&gt;rng-&gt;count&#32;-&#32;startCount;
151 
152 &#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1ab8f63a1dfdb2992657530ff8a63fdc01">rcvdMsgCount</link>&#32;++;
153 
154 
155 
156 }
<link linkend="neuron_8h_1a92d5882a15e11e2a6733483d51428e46">157 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="neuron_8c_1a92d5882a15e11e2a6733483d51428e46">neuronShouldFire</link>(<link linkend="structneuron_state">neuronState</link>&#32;*st){
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//check&#32;negative&#32;threshold&#32;values:</emphasis>
159 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(st-&gt;<link linkend="structneuron_state_1a0fdd8f44c4105a94e17c4c58a51db486">membranePot</link>&#32;&lt;&#32;)&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(st-&gt;<link linkend="structneuron_state_1a3ec480684e7a2cfc67a8ef7ac1bf57b9">negThresReset</link>)&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//reset&#32;to&#32;\f$－β_j\f$</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
163 &#32;&#32;&#32;&#32;}
164 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;st-&gt;<link linkend="structneuron_state_1a0fdd8f44c4105a94e17c4c58a51db486">membranePot</link>&#32;&gt;&#32;st-&gt;<link linkend="structneuron_state_1a132470c4c17828c209e3403ccf7ee680">threshold</link>;
165 }
<link linkend="neuron_8h_1ae071ef984b7e0dd4ec38fca91e0abe39">166 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1ae071ef984b7e0dd4ec38fca91e0abe39">neuronFire</link>(<link linkend="structneuron_state">neuronState</link>&#32;*st,&#32;tw_stime&#32;time,&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*m){
167 
168 }
<link linkend="neuron_8h_1ab1f4997e4bfe11e78faa6d37748aee67">169 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1ab1f4997e4bfe11e78faa6d37748aee67">neuronPostFire</link>(<link linkend="structneuron_state">neuronState</link>&#32;*st,&#32;tw_stime&#32;time,&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*m){
170 
171 }
<link linkend="neuron_8h_1a06ee765bfae45fe9b7f0619bf4abe63d">172 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1a06ee765bfae45fe9b7f0619bf4abe63d">generateWaitEvent</link>(<link linkend="structneuron_state">neuronState</link>&#32;*st,&#32;tw_stime&#32;time,&#32;tw_lp&#32;*lp){
173 
174 }
<link linkend="neuron_8h_1ae630bdf5dd3744870968f07a6971659c">175 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8c_1ae630bdf5dd3744870968f07a6971659c">integrateSynapse</link>(<link linkend="assist_8h_1a3f7a6e6a1210b6d9d7a42177dcb9634b">_idT</link>&#32;synapseID,<link linkend="structneuron_state">neuronState</link>&#32;*st,&#32;tw_lp&#32;*lp)&#32;{
176 &#32;&#32;&#32;&#32;<link linkend="assist_8h_1abe1fc1b8f9efd1187e564bcb8de7f815">_voltT</link>&#32;adjustedWeight;
177 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(st-&gt;perSynapseDet[synapseID]&#32;==&#32;<emphasis class="keyword">true</emphasis>)&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjustedWeight&#32;=&#32;st-&gt;perSynapseWeight[synapseID];
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structneuron_state_1a0fdd8f44c4105a94e17c4c58a51db486">membranePot</link>&#32;+=&#32;adjustedWeight;
180 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{&#32;<emphasis class="comment">//stochastic&#32;mode&#32;weights:</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="assist_8h_1abe1fc1b8f9efd1187e564bcb8de7f815">_voltT</link>&#32;rand&#32;=&#32;tw_rand_integer(lp-&gt;rng,&#32;st-&gt;,&#32;&lt;#<emphasis class="keywordtype">long</emphasis>&#32;high#&gt;)
182 
183 }
184 
185 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="neuron_8h_1adadd3095c39786607629697406f3d1eb">neuronPostIntegrate</link>(<link linkend="structneuron_state">neuronState</link>&#32;*st,&#32;tw_stime&#32;time,&#32;tw_lp&#32;*lp,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;didFire){
186 
187 }
    </computeroutput></literallayout>
</section>
