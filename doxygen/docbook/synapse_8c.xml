<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="synapse_8c">
    <title>synapse.c File Reference</title>
    <programlisting>#include &quot;synapse.h&quot;</programlisting>
<para>Include dependency diagram for synapse.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="synapse_8c__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for synapse.c</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="synapse_8c__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="synapse_8c_1a751f7a42bfc55f55fc0fd299165c5906">synapseReceiveMessage</link> (
<link linkend="structsynapse_state">synapseState</link> * st, <link linkend="struct_msg___data">Msg_Data</link> * M, tw_lp * lp)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="synapse_8c_1a8f9aab389278863b114c27bc10257864">synapseReverseState</link> (
<link linkend="structsynapse_state">synapseState</link> * st, <link linkend="struct_msg___data">Msg_Data</link> * M, tw_lp * lp)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/mplagge/development/tnt_benchmark/models/synapse.c</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">//</emphasis>
2 <emphasis class="comment">//&#32;&#32;synapse.c</emphasis>
3 <emphasis class="comment">//&#32;&#32;ROSS_TOP</emphasis>
4 <emphasis class="comment">//</emphasis>
5 <emphasis class="comment">//&#32;&#32;Created&#32;by&#32;Mark&#32;Plagge&#32;on&#32;6/18/15.</emphasis>
6 <emphasis class="comment">//</emphasis>
7 <emphasis class="comment">//</emphasis>
8 
9 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="synapse_8h">synapse.h</link>&quot;</emphasis>
10 
<link linkend="synapse_8h_1a751f7a42bfc55f55fc0fd299165c5906">11 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="synapse_8c_1a751f7a42bfc55f55fc0fd299165c5906">synapseReceiveMessage</link>(<link linkend="structsynapse_state">synapseState</link>&#32;*st,&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*M,&#32;tw_lp&#32;*lp)&#32;{
12 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">long</emphasis>&#32;start_count&#32;=&#32;lp-&gt;rng-&gt;count;
13 &#32;&#32;&#32;&#32;tw_stime&#32;time;
14 &#32;&#32;&#32;&#32;st-&gt;<link linkend="structsynapse_state_1a7d208d07285a221f4ef19f6fa307b536">msgSent</link>&#32;++;
15 
16 &#32;&#32;&#32;&#32;time&#32;=&#32;<link linkend="assist_8c_1a30602b11dbfa6bcb90dc00e7942cfb02">getNextEventTime</link>(lp);
17 &#32;&#32;&#32;&#32;tw_event&#32;*newEvent&#32;=&#32;tw_event_new(st-&gt;<link linkend="structsynapse_state_1a0710dca002b4b3a3f7ae72633bef3691">destNeuron</link>,&#32;time,&#32;lp);
18 &#32;&#32;&#32;&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*data&#32;=&#32;(<link linkend="struct_msg___data">Msg_Data</link>&#32;*&#32;)&#32;tw_event_data(newEvent);
19 &#32;&#32;&#32;&#32;data-&gt;<link linkend="struct_msg___data_1a015b6eb45982e1842ee8fc389a099ced">eventType</link>&#32;=&#32;<link linkend="assist_8h_1a7c1688de451e0dea1e11617bce3ec450a6ad6b93d8a818550e7246f6e0d143afb">SYNAPSE_OUT</link>;
20 &#32;&#32;&#32;&#32;tw_event_send(newEvent);
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//check&#32;to&#32;see&#32;if&#32;this&#32;is&#32;the&#32;last&#32;synapse:</emphasis>
23 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(st-&gt;<link linkend="structsynapse_state_1ab73db495221608d3eae73d51670d29f0">mySynapseNum</link>&#32;&lt;&#32;<link linkend="assist_8h_1a67e8e45768f76b984a60fcff2b7c51aa">NEURONS_IN_CORE</link>)&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;=&#32;<link linkend="assist_8c_1a30602b11dbfa6bcb90dc00e7942cfb02">getNextEventTime</link>(lp);
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tw_event&#32;*newEvent&#32;=&#32;tw_event_new(st-&gt;<link linkend="structsynapse_state_1a665999819b255f36d756f17b85bc9a03">destSynapse</link>,&#32;time,&#32;lp);
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*data&#32;=&#32;(<link linkend="struct_msg___data">Msg_Data</link>&#32;*&#32;)&#32;tw_event_data(newEvent);
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data-&gt;<link linkend="struct_msg___data_1a015b6eb45982e1842ee8fc389a099ced">eventType</link>&#32;=&#32;<link linkend="assist_8h_1a7c1688de451e0dea1e11617bce3ec450a6ad6b93d8a818550e7246f6e0d143afb">SYNAPSE_OUT</link>;
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tw_event_send(newEvent);
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structsynapse_state_1a7d208d07285a221f4ef19f6fa307b536">msgSent</link>&#32;++;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
31 
32 
33 
34 
35 
36 
37 &#32;&#32;&#32;&#32;M-&gt;<link linkend="struct_msg___data_1a2e49a6bcc6c45ade722f746b1ea707f2">rndCallCount</link>&#32;=&#32;lp-&gt;rng-&gt;count&#32;-&#32;start_count;
38 
39 }
<link linkend="synapse_8h_1a8f9aab389278863b114c27bc10257864">40 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="synapse_8c_1a8f9aab389278863b114c27bc10257864">synapseReverseState</link>(<link linkend="structsynapse_state">synapseState</link>&#32;*st,&#32;<link linkend="struct_msg___data">Msg_Data</link>&#32;*M,&#32;tw_lp&#32;*lp)&#32;{
41 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(st-&gt;<link linkend="structsynapse_state_1ab73db495221608d3eae73d51670d29f0">mySynapseNum</link>&#32;&lt;&#32;<link linkend="assist_8h_1a67e8e45768f76b984a60fcff2b7c51aa">NEURONS_IN_CORE</link>)&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;<link linkend="structsynapse_state_1a7d208d07285a221f4ef19f6fa307b536">msgSent</link>&#32;--;
43 &#32;&#32;&#32;&#32;}
44 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">long</emphasis>&#32;count&#32;=&#32;M-&gt;<link linkend="struct_msg___data_1a2e49a6bcc6c45ade722f746b1ea707f2">rndCallCount</link>;
45 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(count--)&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tw_rand_reverse_unif(lp-&gt;rng);
47 &#32;&#32;&#32;&#32;}
48 
49 }
    </computeroutput></literallayout>
</section>
